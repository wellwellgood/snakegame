{"version":3,"file":"static/js/54.a205f991.chunk.js","mappings":"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","sources":["../node_modules/@apps-in-toss/bridge-core/dist/index.js","../node_modules/@apps-in-toss/web-bridge/built/bridge.js","../node_modules/@apps-in-toss/types/dist/index.js","../node_modules/@apps-in-toss/web-bridge/built/index.js"],"sourcesContent":["// src/nativeWindow.ts\nvar NativeWindow = class {\n  get _window() {\n    if (typeof window !== \"undefined\") {\n      return window;\n    }\n    return {\n      ReactNativeWebView: {\n        postMessage: () => {\n        }\n      },\n      __GRANITE_NATIVE_EMITTER: {\n        on: () => () => {\n        }\n      },\n      __CONSTANT_HANDLER_MAP: {}\n    };\n  }\n  postMessage(message) {\n    const webView = this._window.ReactNativeWebView;\n    if (!webView) {\n      throw new Error(\"ReactNativeWebView is not available in browser environment\");\n    }\n    webView.postMessage(JSON.stringify(message));\n  }\n  on(event, callback) {\n    const emitter = this._window.__GRANITE_NATIVE_EMITTER;\n    if (!emitter) {\n      throw new Error(\"__GRANITE_NATIVE_EMITTER is not available\");\n    }\n    return emitter.on(event, callback);\n  }\n  getConstant(method) {\n    const constantHandlerMap = this._window.__CONSTANT_HANDLER_MAP;\n    if (constantHandlerMap && method in constantHandlerMap) {\n      return constantHandlerMap[method];\n    }\n    throw new Error(`${method} is not a constant handler`);\n  }\n};\nvar nativeWindow = new NativeWindow();\nvar createEventId = () => Math.random().toString(36).substring(2, 15);\nvar deserializeError = (value) => {\n  if (value && value.__isError) {\n    const err = new Error(value.message);\n    err.name = value.name;\n    err.stack = value.stack;\n    return err;\n  }\n  return value;\n};\n\n// src/createAsyncBridge.ts\nfunction createAsyncBridge(method) {\n  return (...args) => {\n    const eventId = createEventId();\n    const emitters = [];\n    const unsubscribe = () => {\n      for (const remove of emitters) {\n        remove();\n      }\n    };\n    return new Promise((resolve, reject) => {\n      emitters.push(\n        nativeWindow.on(`${method}/resolve/${eventId}`, (data) => {\n          unsubscribe();\n          resolve(data);\n        })\n      );\n      emitters.push(\n        nativeWindow.on(`${method}/reject/${eventId}`, (error) => {\n          unsubscribe();\n          reject(deserializeError(error));\n        })\n      );\n      nativeWindow.postMessage({\n        type: \"method\",\n        functionName: method,\n        eventId,\n        args\n      });\n    });\n  };\n}\n\n// src/createEventBridge.ts\nfunction createEventBridge(method) {\n  return (args) => {\n    const eventId = createEventId();\n    const removes = [\n      nativeWindow.on(`${method}/onEvent/${eventId}`, (data) => {\n        args.onEvent(data);\n      }),\n      nativeWindow.on(`${method}/onError/${eventId}`, (error) => {\n        args.onError(deserializeError(error));\n      })\n    ];\n    nativeWindow.postMessage({\n      type: \"addEventListener\",\n      functionName: method,\n      eventId,\n      args: args.options\n    });\n    return () => {\n      nativeWindow.postMessage({\n        type: \"removeEventListener\",\n        functionName: method,\n        eventId\n      });\n      removes.forEach((remove) => remove());\n    };\n  };\n}\n\n// src/createConstantBridge.ts\nfunction createConstantBridge(method) {\n  return () => {\n    return nativeWindow.getConstant(method);\n  };\n}\nexport {\n  createAsyncBridge,\n  createConstantBridge,\n  createEventBridge\n};\n","import{createAsyncBridge,createConstantBridge,createEventBridge}from\"@apps-in-toss/bridge-core\";var createEvents=function(){return{emit:function emit(event,args){for(var callbacks=this.events[event]||[],i=0,length=callbacks.length;i<length;i++){callbacks[i](args)}},events:{},on:function on(event,cb){var _this=this;var _this_events,_event;((_this_events=this.events)[_event=event]||(_this_events[_event]=[])).push(cb);return function(){var _this_events_event;_this.events[event]=(_this_events_event=_this.events[event])===null||_this_events_event===void 0?void 0:_this_events_event.filter(function(i){return cb!==i})}}}};if(typeof window!==\"undefined\"){window.__GRANITE_NATIVE_EMITTER=createEvents()}export var closeView=createAsyncBridge(\"closeView\");export var generateHapticFeedback=createAsyncBridge(\"generateHapticFeedback\");export var share=createAsyncBridge(\"share\");export var setSecureScreen=createAsyncBridge(\"setSecureScreen\");export var setScreenAwakeMode=createAsyncBridge(\"setScreenAwakeMode\");export var getNetworkStatus=createAsyncBridge(\"getNetworkStatus\");export var setIosSwipeGestureEnabled=createAsyncBridge(\"setIosSwipeGestureEnabled\");export var openURL=createAsyncBridge(\"openURL\");export var openPermissionDialog=createAsyncBridge(\"openPermissionDialog\");export var getPermission=createAsyncBridge(\"getPermission\");export var requestPermission=createAsyncBridge(\"requestPermission\");export var setClipboardText=createConstantBridge(\"setClipboardText\");export var getClipboardText=createConstantBridge(\"getClipboardText\");export var fetchContacts=createConstantBridge(\"fetchContacts\");export var fetchAlbumPhotos=createConstantBridge(\"fetchAlbumPhotos\");export var getCurrentLocation=createConstantBridge(\"getCurrentLocation\");export var openCamera=createConstantBridge(\"openCamera\");export var appLogin=createAsyncBridge(\"appLogin\");export var eventLog=createAsyncBridge(\"eventLog\");export var getTossShareLink=createAsyncBridge(\"getTossShareLink\");export var setDeviceOrientation=createAsyncBridge(\"setDeviceOrientation\");export var checkoutPayment=createAsyncBridge(\"checkoutPayment\");export var saveBase64Data=createAsyncBridge(\"saveBase64Data\");export var getGameCenterGameProfile=createAsyncBridge(\"getGameCenterGameProfile\");export var openGameCenterLeaderboard=createAsyncBridge(\"openGameCenterLeaderboard\");export var submitGameCenterLeaderBoardScore=createAsyncBridge(\"submitGameCenterLeaderBoardScore\");export var getLocale=createConstantBridge(\"getLocale\");export var getSchemeUri=createConstantBridge(\"getSchemeUri\");export var getPlatformOS=createConstantBridge(\"getPlatformOS\");export var getOperationalEnvironment=createConstantBridge(\"getOperationalEnvironment\");export var getTossAppVersion=createConstantBridge(\"getTossAppVersion\");export var getDeviceId=createConstantBridge(\"getDeviceId\");export var contactsViral=createEventBridge(\"contactsViral\");export var startUpdateLocation=createEventBridge(\"startUpdateLocation\");export var onVisibilityChangedByTransparentServiceWeb=createEventBridge(\"onVisibilityChangedByTransparentServiceWeb\");","// src/permissions/PermissionError.ts\nvar PermissionError = class extends Error {\n  constructor({ methodName, message }) {\n    super();\n    this.name = `${methodName} permission error`;\n    this.message = message;\n  }\n};\n\n// src/permissions/FetchAlbumPhotosPermissionError.ts\nvar FetchAlbumPhotosPermissionError = class extends PermissionError {\n  constructor() {\n    super({ methodName: \"fetchAlbumPhotos\", message: \"\\uC0AC\\uC9C4\\uCCA9 \\uAD8C\\uD55C\\uC774 \\uAC70\\uBD80\\uB418\\uC5C8\\uC5B4\\uC694.\" });\n  }\n};\n\n// src/permissions/FetchContactsPermissionError.ts\nvar FetchContactsPermissionError = class extends PermissionError {\n  constructor() {\n    super({ methodName: \"fetchContacts\", message: \"\\uC5F0\\uB77D\\uCC98 \\uAD8C\\uD55C\\uC774 \\uAC70\\uBD80\\uB418\\uC5C8\\uC5B4\\uC694.\" });\n  }\n};\n\n// src/permissions/OpenCameraPermissionError.ts\nvar OpenCameraPermissionError = class extends PermissionError {\n  constructor() {\n    super({ methodName: \"openCamera\", message: \"\\uCE74\\uBA54\\uB77C \\uAD8C\\uD55C\\uC774 \\uAC70\\uBD80\\uB418\\uC5C8\\uC5B4\\uC694.\" });\n  }\n};\n\n// src/permissions/getCurrentLocation.ts\nvar Accuracy = /* @__PURE__ */ ((Accuracy2) => {\n  Accuracy2[Accuracy2[\"Lowest\"] = 1] = \"Lowest\";\n  Accuracy2[Accuracy2[\"Low\"] = 2] = \"Low\";\n  Accuracy2[Accuracy2[\"Balanced\"] = 3] = \"Balanced\";\n  Accuracy2[Accuracy2[\"High\"] = 4] = \"High\";\n  Accuracy2[Accuracy2[\"Highest\"] = 5] = \"Highest\";\n  Accuracy2[Accuracy2[\"BestForNavigation\"] = 6] = \"BestForNavigation\";\n  return Accuracy2;\n})(Accuracy || {});\n\n// src/permissions/GetCurrentLocationPermissionError.ts\nvar GetCurrentLocationPermissionError = class extends PermissionError {\n  constructor() {\n    super({ methodName: \"getCurrentLocation\", message: \"\\uC704\\uCE58 \\uAD8C\\uD55C\\uC774 \\uAC70\\uBD80\\uB418\\uC5C8\\uC5B4\\uC694.\" });\n  }\n};\n\n// src/permissions/StartUpdateLocationPermissionError.ts\nvar StartUpdateLocationPermissionError = GetCurrentLocationPermissionError;\n\n// src/permissions/GetClipboardTextPermissionError.ts\nvar GetClipboardTextPermissionError = class extends PermissionError {\n  constructor() {\n    super({ methodName: \"getClipboardText\", message: \"\\uD074\\uB9BD\\uBCF4\\uB4DC \\uC77D\\uAE30 \\uAD8C\\uD55C\\uC774 \\uAC70\\uBD80\\uB418\\uC5C8\\uC5B4\\uC694.\" });\n  }\n};\n\n// src/permissions/SetClipboardTextPermissionError.ts\nvar SetClipboardTextPermissionError = class extends PermissionError {\n  constructor() {\n    super({ methodName: \"setClipboardText\", message: \"\\uD074\\uB9BD\\uBCF4\\uB4DC \\uC4F0\\uAE30 \\uAD8C\\uD55C\\uC774 \\uAC70\\uBD80\\uB418\\uC5C8\\uC5B4\\uC694.\" });\n  }\n};\nexport {\n  Accuracy,\n  FetchAlbumPhotosPermissionError,\n  FetchContactsPermissionError,\n  GetClipboardTextPermissionError,\n  GetCurrentLocationPermissionError,\n  OpenCameraPermissionError,\n  SetClipboardTextPermissionError,\n  StartUpdateLocationPermissionError\n};\n","export * from './bridge.js';\n\n// src/index.ts\nexport * from \"@apps-in-toss/bridge-core\";\n\n// src/storage.ts\nimport { createAsyncBridge } from \"@apps-in-toss/bridge-core\";\nvar Storage = {\n  /**\n   * @public\n   * @category 저장소\n   * @name getItem\n   * @description 모바일 앱의 로컬 저장소에서 문자열 데이터를 가져와요. 주로 앱이 종료되었다가 다시 시작해도 데이터가 유지되어야 하는 경우에 사용해요.\n   * @param {string} key - 가져올 아이템의 키를 입력해요.\n   * @returns {Promise<string | null>} 지정한 키에 저장된 문자열 값을 반환해요. 값이 없으면 `null`을 반환해요.\n   * @example\n   *\n   * ### `my-key`에 저장된 아이템 가져오기\n   * ```ts\n   * const value = await Storage.getItem('my-key');\n   * console.log(value); // 'value'\n   * ```\n   */\n  getItem: createAsyncBridge(\"getStorageItem\"),\n  /**\n   * @public\n   * @category 저장소\n   * @name setItem\n   * @description 모바일 앱의 로컬 저장소에 문자열 데이터를 저장해요. 주로 앱이 종료되었다가 다시 시작해도 데이터가 유지되어야 하는 경우에 사용해요.\n   * @param {string} key - 저장할 아이템의 키를 입력해요.\n   * @param {string} value - 저장할 아이템의 값을 입력해요.\n   * @returns {Promise<void>} 아이템을 성공적으로 저장하면 아무 값도 반환하지 않아요.\n   * @example\n   *\n   * ### `my-key`에 아이템 저장하기\n   * ```ts\n   * import { Storage } from '@apps-in-toss/framework';\n   *\n   * await Storage.setItem('my-key', 'value');\n   * ```\n   */\n  setItem: createAsyncBridge(\"setStorageItem\"),\n  /**\n   * @public\n   * @category 저장소\n   * @name removeItem\n   * @description 모바일 앱의 로컬 저장소에서 특정 키에 해당하는 아이템을 삭제해요.\n   * @param {string} key - 삭제할 아이템의 키를 입력해요.\n   * @returns {Promise<void>} 아이템을 삭제하면 아무 값도 반환하지 않아요.\n   * @example\n   *\n   * ### `my-key`에 저장된 아이템 삭제하기\n   * ```ts\n   * import { Storage } from '@apps-in-toss/framework';\n   *\n   * await Storage.removeItem('my-key');\n   * ```\n   */\n  removeItem: createAsyncBridge(\"removeStorageItem\"),\n  /**\n   * @public\n   * @category 저장소\n   * @name clearItems\n   * @description 모바일 앱의 로컬 저장소의 모든 아이템을 삭제해요.\n   * @returns {Promise<void>} 아이템을 삭제하면 아무 값도 반환하지 않고 저장소가 초기화돼요.\n   * @example\n   *\n   * ### 저장소 초기화하기\n   * ```ts\n   * import { Storage } from '@apps-in-toss/framework';\n   *\n   * await Storage.clearItems();\n   * ```\n   */\n  clearItems: createAsyncBridge(\"clearItems\")\n};\n\n// src/iap.ts\nimport { createAsyncBridge as createAsyncBridge2 } from \"@apps-in-toss/bridge-core\";\nvar IAP = {\n  /**\n   * @public\n   * @category 인앱결제\n   * @name iapCreateOneTimePurchaseOrder\n   * @description\n   * 특정 인앱결제 주문서 페이지로 이동해요. 사용자가 상품 구매 버튼을 누르는 상황 등에 사용할 수 있어요. 사용자의 결제는 이동한 페이지에서 진행돼요. 만약 결제 중에 에러가 발생하면 에러 유형에 따라 에러 페이지로 이동해요.\n   * @param {IapCreateOneTimePurchaseOrderOptions} params - 인앱결제를 생성할 때 필요한 정보예요.\n   * @param {string} params.productId - 주문할 상품의 ID예요.\n   * @returns {Promise<IapCreateOneTimePurchaseOrderResult | undefined>} 결제에 성공하면 결제 결과 객체를 반환해요. 앱 버전이 최소 지원 버전(안드로이드 5.219.0, iOS 5.219.0)보다 낮으면 인앱결제를 실행할 수 없어서 `undefined`를 반환해요.\n   *\n   * @throw {code: \"INVALID_PRODUCT_ID\"} - 유효하지 않은 상품 ID이거나, 해당 상품이 존재하지 않을 때 발생해요.\n   * @throw {code: \"PAYMENT_PENDING\"} - 사용자가 요청한 결제가 아직 승인을 기다리고 있을 때 발생해요.\n   * @throw {code: \"NETWORK_ERROR\"} - 서버 내부 문제로 요청을 처리할 수 없을 때 발생해요.\n   * @throw {code: \"INVALID_USER_ENVIRONMENT\"} - 특정 기기, 계정 또는 설정 환경에서 구매할 수 없는 상품일 때 발생해요.\n   * @throw {code: \"ITEM_ALREADY_OWNED\"} - 사용자가 이미 구매한 상품을 다시 구매하려고 할 때 발생해요.\n   * @throw {code: \"APP_MARKET_VERIFICATION_FAILED\"} - 사용자가 결제를 완료했지만, 앱스토어에서 사용자 정보 검증에 실패했을 때 발생해요. 사용자가 앱스토어에 문의해서 환불을 요청해야해요.\n   * @throw {code: \"TOSS_SERVER_VERIFICATION_FAILED\"} - 사용자가 결제를 완료했지만, 서버 전송에 실패해서 결제 정보를 저장할 수 없을 때 발생해요.\n   * @throw {code: \"INTERNAL_ERROR\"} - 서버 내부 문제로 요청을 처리할 수 없을 때 발생해요.\n   * @throw {code: \"KOREAN_ACCOUNT_ONLY\"} - iOS 환경에서 사용자의 계정이 한국 계정이 아닐 때 발생해요.\n   * @throw {code: \"USER_CANCELED\"} - 사용자가 결제를 완료하지 않고 주문서 페이지를 이탈했을 때 발생해요.\n   */\n  createOneTimePurchaseOrder: createAsyncBridge2(\n    \"iapCreateOneTimePurchaseOrder\"\n  ),\n  /**\n   * @public\n   * @category 인앱결제\n   * @name iapGetProductItemList\n   * @description 인앱결제로 구매할 수 있는 상품 목록을 가져와요. 상품 목록 화면에 진입할 때 호출해요.\n   * @returns {Promise<{ products: IapProductListItem[] } | undefined>} 상품 목록을 포함한 객체를 반환해요. 앱 버전이 최소 지원 버전(안드로이드 5.219.0, iOS 5.219.0)보다 낮으면 `undefined`를 반환해요.\n   */\n  getProductItemList: createAsyncBridge2(\"iapGetProductItemList\")\n};\n\n// src/getSafeAreaInsets.ts\nimport { createConstantBridge } from \"@apps-in-toss/bridge-core\";\nvar getSafeAreaBottom = createConstantBridge(\"getSafeAreaBottom\");\nvar getSafeAreaTop = createConstantBridge(\"getSafeAreaTop\");\nfunction getSafeAreaInsets() {\n  return { top: getSafeAreaTop(), bottom: getSafeAreaBottom() };\n}\n\n// src/googleAdMob.ts\nimport { createConstantBridge as createConstantBridge2, createEventBridge } from \"@apps-in-toss/bridge-core\";\nvar GoogleAdMob = {\n  /**\n   * @public\n   * @category 광고\n   * @name loadAdMobInterstitialAd\n   * @deprecated 이 함수는 더 이상 사용되지 않습니다. 대신 {@link GoogleAdMob.loadAppsInTossAdMob}를 사용해주세요.\n   *\n   * @example\n   * ### 뷰 진입 시 광고 불러오기 (loadAppsInTossAdMob로 변경 예제)\n   * ```tsx\n   * import { GoogleAdMob } from '@apps-in-toss/framework';\n   * import { useEffect } from 'react';\n   * import { View, Text } from 'react-native';\n   *\n   * const AD_GROUP_ID = '<AD_GROUP_ID>';\n   *\n   * function Page() {\n   *   useEffect(() => {\n   *     if (GoogleAdMob.loadAppsInTossAdMob.isSupported() !== true) {\n   *       return;\n   *     }\n   *\n   *     const cleanup = GoogleAdMob.loadAppsInTossAdMob({\n   *       options: {\n   *         adGroupId: AD_GROUP_ID,\n   *       },\n   *       onEvent: (event) => {\n   *         switch (event.type) {\n   *           case 'loaded':\n   *             console.log('광고 로드 성공', event.data);\n   *             break;\n   *         }\n   *       },\n   *       onError: (error) => {\n   *         console.error('광고 불러오기 실패', error);\n   *       },\n   *     });\n   *\n   *     return cleanup;\n   *   }, []);\n   *\n   *   return (\n   *     <View>\n   *       <Text>Page</Text>\n   *     </View>\n   *   );\n   * }\n   * ```\n   */\n  loadAdMobInterstitialAd: Object.assign(\n    createEventBridge(\"loadAdMobInterstitialAd\"),\n    {\n      isSupported: createConstantBridge2(\"loadAdMobInterstitialAd_isSupported\")\n    }\n  ),\n  /**\n   * @public\n   * @category 광고\n   * @name showAdMobInterstitialAd\n   * @deprecated 이 함수는 더 이상 사용되지 않습니다. 대신 {@link GoogleAdMob.showAppsInTossAdMob}를 사용해주세요.\n   *\n   * @example\n   * ### 버튼 눌러 불러온 광고 보여주기 (showAppsInTossAdMob로 대체 사용)\n   * ```tsx\n   * import { GoogleAdMob } from '@apps-in-toss/framework';\n   * import { View, Text, Button } from 'react-native';\n   *\n   * const AD_GROUP_ID = '<AD_GROUP_ID>';\n   *\n   * function Page() {\n   *   const handlePress = () => {\n   *     if (GoogleAdMob.showAppsInTossAdMob.isSupported() !== true) {\n   *       return;\n   *     }\n   *\n   *     GoogleAdMob.showAppsInTossAdMob({\n   *       options: {\n   *         adGroupId: AD_GROUP_ID,\n   *       },\n   *       onEvent: (event) => {\n   *         switch (event.type) {\n   *           case 'requested':\n   *             console.log('광고 보여주기 요청 완료');\n   *             break;\n   *\n   *           case 'clicked':\n   *             console.log('광고 클릭');\n   *             break;\n   *\n   *           case 'dismissed':\n   *             console.log('광고 닫힘');\n   *             navigation.navigate('/examples/google-admob-interstitial-ad-landing');\n   *             break;\n   *\n   *           case 'failedToShow':\n   *             console.log('광고 보여주기 실패');\n   *             break;\n   *\n   *           case 'impression':\n   *             console.log('광고 노출');\n   *             break;\n   *\n   *           case 'userEarnedReward':\n   *             console.log('광고 보상 획득 unitType:', event.data.unitType);\n   *             console.log('광고 보상 획득 unitAmount:', event.data.unitAmount);\n   *             break;\n   *\n   *           case 'show':\n   *             console.log('광고 컨텐츠 보여졌음');\n   *             break;\n   *         }\n   *       },\n   *       onError: (error) => {\n   *         console.error('광고 보여주기 실패', error);\n   *       },\n   *     });\n   *   }\n   *\n   *   return (\n   *     <Button onPress={handlePress} title=\"광고 보기\" />\n   *   );\n   * }\n   * ```\n   */\n  showAdMobInterstitialAd: Object.assign(\n    createEventBridge(\"showAdMobInterstitialAd\"),\n    {\n      isSupported: createConstantBridge2(\"showAdMobInterstitialAd_isSupported\")\n    }\n  ),\n  /**\n   * @public\n   * @category 광고\n   * @name loadAdMobRewardedAd\n   * @deprecated 이 함수는 더 이상 사용되지 않습니다. 대신 {@link GoogleAdMob.loadAppsInTossAdMob}를 사용해주세요.\n   *\n   * @example\n   * ### 뷰 진입 시 광고 불러오기 (loadAppsInTossAdMob로 변경 예제)\n   * ```tsx\n   * import { GoogleAdMob } from '@apps-in-toss/framework';\n   * import { useEffect } from 'react';\n   * import { View, Text } from 'react-native';\n   *\n   * const AD_GROUP_ID = '<AD_GROUP_ID>';\n   *\n   * function Page() {\n   *   useEffect(() => {\n   *     if (GoogleAdMob.loadAppsInTossAdMob.isSupported() !== true) {\n   *       return;\n   *     }\n   *\n   *     const cleanup = GoogleAdMob.loadAppsInTossAdMob({\n   *       options: {\n   *         adGroupId: AD_GROUP_ID,\n   *       },\n   *       onEvent: (event) => {\n   *         switch (event.type) {\n   *           case 'loaded':\n   *             console.log('광고 로드 성공', event.data);\n   *             break;\n   *         }\n   *       },\n   *       onError: (error) => {\n   *         console.error('광고 불러오기 실패', error);\n   *       },\n   *     });\n   *\n   *     return cleanup;\n   *   }, []);\n   *\n   *   return (\n   *     <View>\n   *       <Text>Page</Text>\n   *     </View>\n   *   );\n   * }\n   * ```\n   */\n  loadAdMobRewardedAd: Object.assign(\n    createEventBridge(\"loadAdMobRewardedAd\"),\n    {\n      isSupported: createConstantBridge2(\"loadAdMobRewardedAd_isSupported\")\n    }\n  ),\n  /**\n   * @public\n   * @category 광고\n   * @name showAdMobRewardedAd\n   * @deprecated 이 함수는 더 이상 사용되지 않습니다. 대신 {@link GoogleAdMob.showAppsInTossAdMob}를 사용해주세요.\n   *\n   * @example\n   * ### 버튼 눌러 불러온 광고 보여주기 (showAppsInTossAdMob로 대체 사용)\n   * ```tsx\n   * import { GoogleAdMob } from '@apps-in-toss/framework';\n   * import { View, Text, Button } from 'react-native';\n   *\n   * const AD_GROUP_ID = '<AD_GROUP_ID>';\n   *\n   * function Page() {\n   *   const handlePress = () => {\n   *     if (GoogleAdMob.showAppsInTossAdMob.isSupported() !== true) {\n   *       return;\n   *     }\n   *\n   *     GoogleAdMob.showAppsInTossAdMob({\n   *       options: {\n   *         adGroupId: AD_GROUP_ID,\n   *       },\n   *       onEvent: (event) => {\n   *         switch (event.type) {\n   *           case 'requested':\n   *             console.log('광고 보여주기 요청 완료');\n   *             break;\n   *\n   *           case 'clicked':\n   *             console.log('광고 클릭');\n   *             break;\n   *\n   *           case 'dismissed':\n   *             console.log('광고 닫힘');\n   *             navigation.navigate('/examples/google-admob-interstitial-ad-landing');\n   *             break;\n   *\n   *           case 'failedToShow':\n   *             console.log('광고 보여주기 실패');\n   *             break;\n   *\n   *           case 'impression':\n   *             console.log('광고 노출');\n   *             break;\n   *\n   *           case 'userEarnedReward':\n   *             console.log('광고 보상 획득 unitType:', event.data.unitType);\n   *             console.log('광고 보상 획득 unitAmount:', event.data.unitAmount);\n   *             break;\n   *\n   *           case 'show':\n   *             console.log('광고 컨텐츠 보여졌음');\n   *             break;\n   *         }\n   *       },\n   *       onError: (error) => {\n   *         console.error('광고 보여주기 실패', error);\n   *       },\n   *     });\n   *   }\n   *\n   *   return (\n   *     <Button onPress={handlePress} title=\"광고 보기\" />\n   *   );\n   * }\n   * ```\n   */\n  showAdMobRewardedAd: Object.assign(\n    createEventBridge(\"showAdMobRewardedAd\"),\n    {\n      isSupported: createConstantBridge2(\"showAdMobRewardedAd_isSupported\")\n    }\n  ),\n  /**\n   * @public\n   * @category 광고\n   * @name loadAppsInTossAdMob\n   * @description 광고를 미리 불러와서, 광고가 필요한 시점에 바로 보여줄 수 있도록 준비하는 함수예요.\n   * @param {LoadAdMobParams} params 광고를 불러올 때 사용할 설정 값이에요. 광고 그룹 ID와 광고의 동작에 대한 콜백을 설정할 수 있어요.\n   * @param {LoadAdMobOptions} params.options 광고를 불러올 때 전달할 옵션 객체예요.\n   * @param {string} params.options.adGroupId 광고 그룹 단위 ID예요. 콘솔에서 발급받은 ID를 입력해요.\n   * @param {(event: LoadAdMobEvent) => void} [params.onEvent] 광고 관련 이벤트가 발생했을 때 호출돼요. (예시: 광고가 닫히거나 클릭됐을 때). 자세한 이벤트 타입은 [LoadAdMobEvent](/react-native/reference/native-modules/광고/LoadAdMobEvent.html)를 참고하세요.\n   * @param {(reason: unknown) => void} [params.onError] 광고를 불러오지 못했을 때 호출돼요. (예시: 네트워크 오류나 지원하지 않는 환경일 때)\n   * @property {() => boolean} [isSupported] 현재 실행 중인 앱(예: 토스 앱, 개발용 샌드박스 앱 등)에서 Google AdMob 광고 기능을 지원하는지 확인하는 함수예요. 기능을 사용하기 전에 지원 여부를 확인해야 해요.\n   *\n   * @example\n   * ### 뷰 진입 시 광고 불러오기\n   * ```tsx\n   * import { GoogleAdMob } from '@apps-in-toss/framework';\n   * import { useEffect } from 'react';\n   * import { View, Text } from 'react-native';\n   *\n   * const AD_GROUP_ID = '<AD_GROUP_ID>';\n   *\n   * function Page() {\n   *   useEffect(() => {\n   *     if (GoogleAdMob.loadAppsInTossAdMob.isSupported() !== true) {\n   *       return;\n   *     }\n   *\n   *     const cleanup = GoogleAdMob.loadAppsInTossAdMob({\n   *       options: {\n   *         adGroupId: AD_GROUP_ID,\n   *       },\n   *       onEvent: (event) => {\n   *         switch (event.type) {\n   *           case 'loaded':\n   *             console.log('광고 로드 성공', event.data);\n   *             break;\n   *         }\n   *       },\n   *       onError: (error) => {\n   *         console.error('광고 불러오기 실패', error);\n   *       },\n   *     });\n   *\n   *     return cleanup;\n   *   }, []);\n   *\n   *   return (\n   *     <View>\n   *       <Text>Page</Text>\n   *     </View>\n   *   );\n   * }\n   * ```\n   */\n  loadAppsInTossAdMob: Object.assign(createEventBridge(\"loadAppsInTossAdMob\"), {\n    isSupported: createConstantBridge2(\"loadAppsInTossAdMob_isSupported\")\n  }),\n  /**\n   * @public\n   * @category 광고\n   * @name showAppsInTossAdMob\n   * @description 광고를 사용자에게 노출해요. 이 함수는 `loadAppsInTossAdMob` 로 미리 불러온 광고를 실제로 사용자에게 노출해요.\n   * @param {ShowAdMobParams} params 광고를 보여주기 위해 사용할 설정 값이에요. 광고 그룹 ID와과 광고의 동작에 대한 콜백을 설정할 수 있어요.\n   * @param {ShowAdMobOptions} params.options 광고를 보여줄 때 전달할 옵션 객체예요.\n   * @param {string} params.options.adUnitId 광고 그룹 단위 ID예요. `loadAppsInTossAdMob` 로 불러온 광고용 그룹 ID를 입력해요.\n   * @param {(event: ShowAdMobEvent) => void} [params.onEvent] 광고 관련 이벤트가 발생했을 때 호출돼요. (예시: 광고 노출을 요청했을 때). 자세한 이벤트 타입은 [ShowAdMobEvent](/react-native/reference/native-modules/광고/ShowAdMobEvent.html)를 참고하세요.\n   * @param {(reason: unknown) => void} [params.onError] 광고를 노출하지 못했을 때 호출돼요. (예시: 네트워크 오류나 지원하지 않는 환경일 때)\n   * @property {() => boolean} [isSupported] 현재 실행 중인 앱(예: 토스 앱, 개발용 샌드박스 앱 등)에서 Google AdMob 광고 기능을 지원하는지 확인하는 함수예요. 기능을 사용하기 전에 지원 여부를 확인해야 해요.\n   *\n   * @example\n   * ### 버튼 눌러 불러온 광고 보여주기\n   * ```tsx\n   * import { GoogleAdMob } from '@apps-in-toss/framework';\n   * import { View, Text, Button } from 'react-native';\n   *\n   * const AD_GROUP_ID = '<AD_GROUP_ID>';\n   *\n   * function Page() {\n   *   const handlePress = () => {\n   *     if (GoogleAdMob.showAppsInTossAdMob.isSupported() !== true) {\n   *       return;\n   *     }\n   *\n   *     GoogleAdMob.showAppsInTossAdMob({\n   *       options: {\n   *         adGroupId: AD_GROUP_ID,\n   *       },\n   *       onEvent: (event) => {\n   *         switch (event.type) {\n   *           case 'requested':\n   *             console.log('광고 보여주기 요청 완료');\n   *             break;\n   *\n   *           case 'clicked':\n   *             console.log('광고 클릭');\n   *             break;\n   *\n   *           case 'dismissed':\n   *             console.log('광고 닫힘');\n   *             navigation.navigate('/examples/google-admob-interstitial-ad-landing');\n   *             break;\n   *\n   *           case 'failedToShow':\n   *             console.log('광고 보여주기 실패');\n   *             break;\n   *\n   *           case 'impression':\n   *             console.log('광고 노출');\n   *             break;\n   *\n   *           case 'userEarnedReward':\n   *             console.log('광고 보상 획득 unitType:', event.data.unitType);\n   *             console.log('광고 보상 획득 unitAmount:', event.data.unitAmount);\n   *             break;\n   *\n   *           case 'show':\n   *             console.log('광고 컨텐츠 보여졌음');\n   *             break;\n   *         }\n   *       },\n   *       onError: (error) => {\n   *         console.error('광고 보여주기 실패', error);\n   *       },\n   *     });\n   *   }\n   *\n   *   return (\n   *     <Button onPress={handlePress} title=\"광고 보기\" />\n   *   );\n   * }\n   * ```\n   */\n  showAppsInTossAdMob: Object.assign(createEventBridge(\"showAppsInTossAdMob\"), {\n    isSupported: createConstantBridge2(\"showAppsInTossAdMob_isSupported\")\n  })\n};\n\n// src/graniteEvent.ts\nimport { createEventBridge as createEventBridge2 } from \"@apps-in-toss/bridge-core\";\nvar graniteEvent = {\n  addEventListener: (event, {\n    onEvent,\n    onError,\n    options\n  }) => createEventBridge2(event)({\n    onEvent,\n    onError: onError ?? (() => {\n    }),\n    options\n  })\n};\n\n// src/isMinVersionSupported.ts\nimport { createConstantBridge as createConstantBridge3 } from \"@apps-in-toss/bridge-core\";\n\n// src/utils/compareVersion.ts\nvar SEMVER_REGEX = /^[v^~<>=]*?(\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+))?(?:-([\\da-z\\\\-]+(?:\\.[\\da-z\\\\-]+)*))?(?:\\+[\\da-z\\\\-]+(?:\\.[\\da-z\\\\-]+)*)?)?)?$/i;\nvar isWildcard = (val) => [\"*\", \"x\", \"X\"].includes(val);\nvar tryParse = (val) => {\n  const num = parseInt(val, 10);\n  return isNaN(num) ? val : num;\n};\nvar coerceTypes = (a, b) => {\n  return typeof a === typeof b ? [a, b] : [String(a), String(b)];\n};\nvar compareValues = (a, b) => {\n  if (isWildcard(a) || isWildcard(b)) {\n    return 0;\n  }\n  const [aVal, bVal] = coerceTypes(tryParse(a), tryParse(b));\n  if (aVal > bVal) {\n    return 1;\n  }\n  if (aVal < bVal) {\n    return -1;\n  }\n  return 0;\n};\nvar parseVersion = (version) => {\n  if (typeof version !== \"string\") {\n    throw new TypeError(\"Invalid argument: expected a string\");\n  }\n  const match = version.match(SEMVER_REGEX);\n  if (!match) {\n    throw new Error(`Invalid semver: '${version}'`);\n  }\n  const [, major, minor, patch, build, preRelease] = match;\n  return [major, minor, patch, build, preRelease];\n};\nvar compareSegments = (a, b) => {\n  const maxLength = Math.max(a.length, b.length);\n  for (let i = 0; i < maxLength; i++) {\n    const segA = a[i] ?? \"0\";\n    const segB = b[i] ?? \"0\";\n    const result = compareValues(segA, segB);\n    if (result !== 0) {\n      return result;\n    }\n  }\n  return 0;\n};\nvar compareVersions = (v1, v2) => {\n  const seg1 = parseVersion(v1);\n  const seg2 = parseVersion(v2);\n  const preRelease1 = seg1.pop();\n  const preRelease2 = seg2.pop();\n  const mainCompare = compareSegments(seg1, seg2);\n  if (mainCompare !== 0) {\n    return mainCompare;\n  }\n  if (preRelease1 && preRelease2) {\n    return compareSegments(preRelease1.split(\".\"), preRelease2.split(\".\"));\n  }\n  if (preRelease1) {\n    return -1;\n  }\n  if (preRelease2) {\n    return 1;\n  }\n  return 0;\n};\n\n// src/isMinVersionSupported.ts\nfunction isMinVersionSupported(minVersions) {\n  const operationalEnvironment = createConstantBridge3(\"getOperationalEnvironment\")();\n  if (operationalEnvironment === \"sandbox\") {\n    return true;\n  }\n  const currentVersion = createConstantBridge3(\"getTossAppVersion\")();\n  const isIOS = createConstantBridge3(\"getPlatformOS\")() === \"ios\";\n  const minVersion = isIOS ? minVersions.ios : minVersions.android;\n  if (minVersion === void 0) {\n    return false;\n  }\n  if (minVersion === \"always\") {\n    return true;\n  }\n  if (minVersion === \"never\") {\n    return false;\n  }\n  return compareVersions(currentVersion, minVersion) >= 0;\n}\n\n// src/appsInTossEvent.ts\nimport { createEventBridge as createEventBridge3 } from \"@apps-in-toss/bridge-core\";\nvar appsInTossEvent = {\n  addEventListener: (event, {\n    onEvent,\n    onError,\n    options\n  }) => createEventBridge3(event)({\n    onEvent,\n    onError: onError ?? (() => {\n    }),\n    options\n  })\n};\n\n// src/env.ts\nimport { createConstantBridge as createConstantBridge4 } from \"@apps-in-toss/bridge-core\";\nvar env = {\n  getDeploymentId: createConstantBridge4(\"getDeploymentId\")\n};\n\n// src/global.ts\nimport { createConstantBridge as createConstantBridge5 } from \"@apps-in-toss/bridge-core\";\nvar deploymentId = createConstantBridge5(\"deploymentId\");\nvar brandDisplayName = createConstantBridge5(\"brandDisplayName\");\nvar brandIcon = createConstantBridge5(\"brandIcon\");\nvar brandPrimaryColor = createConstantBridge5(\"brandPrimaryColor\");\nvar brandBridgeColorMode = createConstantBridge5(\"brandBridgeColorMode\");\nvar getAppsInTossGlobals = () => {\n  return {\n    deploymentId: deploymentId(),\n    brandDisplayName: brandDisplayName(),\n    brandIcon: brandIcon(),\n    brandPrimaryColor: brandPrimaryColor(),\n    brandBridgeColorMode: brandBridgeColorMode()\n  };\n};\n\n// src/tdsEvent.ts\nimport { createEventBridge as createEventBridge4 } from \"@apps-in-toss/bridge-core\";\nvar tdsEvent = {\n  /**\n   * @public\n   * @category TDS\n   * @name addEventListener\n   * @description 이벤트를 추가해요.\n   * @param {string} event 이벤트 이름예요.\n   * @param {TdsEvent[K]['onEvent']} onEvent 이벤트 핸들러예요.\n   * @param {TdsEvent[K]['onError']} onError 이벤트 에러 핸들러예요.\n   * @param {TdsEvent[K]['options']} options 이벤트 옵션예요.\n   * @returns {void} 이벤트를 추가했을 때 아무 값도 반환하지 않아요.\n   * @example\n   * ### 네비게이션 악세서리 이벤트 추가하기\n   * ```tsx\n   * import { tdsEvent } from '@apps-in-toss/framework';\n   *\n   * tdsEvent.addEventListener('navigationAccessoryEvent', {\n   *   onEvent: ({ id }) => {\n   *     if(id === 'heart') {\n   *       router.push('/heart');\n   *     }\n   *   },\n   * });\n   * ```\n   */\n  addEventListener: (event, {\n    onEvent,\n    onError,\n    options\n  }) => createEventBridge4(event)({\n    onEvent,\n    onError: onError ?? (() => {\n    }),\n    options\n  })\n};\n\n// src/partner.ts\nimport { createAsyncBridge as createAsyncBridge3 } from \"@apps-in-toss/bridge-core\";\nvar partner = {\n  /**\n   * @public\n   * @category 파트너\n   * @name addAccessoryButton\n   * @description 상단 네비게이션의 악세서리 버튼을 추가해요. callback에 대한 정의는 `tdsEvent.addEventListener(\"navigationAccessoryEvent\", callback)`를 참고해주세요.\n   * @param {AddAccessoryButtonOptions} options - 악세서리 버튼의 고유 ID예요.\n   * @returns {void} 악세서리 버튼을 추가했을 때 아무 값도 반환하지 않아요.\n   * @example\n   * ```tsx\n   * import { partner } from '@apps-in-toss/framework';\n   *\n   * partner.addAccessoryButton({\n      id: 'init-heart',\n      title: '하트',\n      icon: {\n        name: 'icon-heart-mono',\n      },\n    });\n   * ```\n   */\n  addAccessoryButton: createAsyncBridge3(\"addAccessoryButton\"),\n  /**\n   * @public\n   * @category 파트너\n   * @name removeAccessoryButton\n   * @description 상단 네비게이션의 악세서리 버튼을 제거해요.\n   * @returns {void} 악세서리 버튼을 제거했을 때 아무 값도 반환하지 않아요.\n   * @example\n   * ```tsx\n   * import { partner } from '@apps-in-toss/framework';\n   *\n   * partner.removeAccessoryButton();\n   * ```\n   */\n  removeAccessoryButton: createAsyncBridge3(\"removeAccessoryButton\")\n};\n\n// src/permissions/fetchAlbumPhotos.ts\nimport { createAsyncBridge as createAsyncBridge5 } from \"@apps-in-toss/bridge-core\";\nimport { FetchAlbumPhotosPermissionError } from \"@apps-in-toss/types\";\n\n// src/permissions/createPermissionFunction.ts\nimport { createAsyncBridge as createAsyncBridge4 } from \"@apps-in-toss/bridge-core\";\nvar requestPermission = createAsyncBridge4(\"requestPermission\");\nvar getPermission = createAsyncBridge4(\"getPermission\");\nvar openPermissionDialog = createAsyncBridge4(\"openPermissionDialog\");\nfunction createPermissionFunction({\n  permission,\n  handler,\n  error\n}) {\n  const permissionFunction = async (...args) => {\n    const permissionStatus = await requestPermission(permission);\n    if (permissionStatus === \"denied\") {\n      throw new error();\n    }\n    return handler(...args);\n  };\n  permissionFunction.getPermission = () => getPermission(permission);\n  permissionFunction.openPermissionDialog = () => openPermissionDialog(permission);\n  return permissionFunction;\n}\n\n// src/permissions/fetchAlbumPhotos.ts\nvar fetchAlbumPhotos = createPermissionFunction({\n  handler: (options) => {\n    return createAsyncBridge5(\"fetchAlbumPhotos\")(\n      options\n    );\n  },\n  permission: {\n    name: \"photos\",\n    access: \"read\"\n  },\n  error: FetchAlbumPhotosPermissionError\n});\n\n// src/permissions/fetchContacts.ts\nimport { createAsyncBridge as createAsyncBridge6 } from \"@apps-in-toss/bridge-core\";\nimport { FetchContactsPermissionError } from \"@apps-in-toss/types\";\nvar fetchContacts = createPermissionFunction({\n  handler: (options) => {\n    return createAsyncBridge6(\"fetchContacts\")(options);\n  },\n  permission: {\n    name: \"contacts\",\n    access: \"read\"\n  },\n  error: FetchContactsPermissionError\n});\n\n// src/permissions/getCurrentLocation.ts\nimport { createAsyncBridge as createAsyncBridge7 } from \"@apps-in-toss/bridge-core\";\nimport {\n  GetCurrentLocationPermissionError\n} from \"@apps-in-toss/types\";\nvar getCurrentLocation = createPermissionFunction({\n  handler: (options) => {\n    return createAsyncBridge7(\n      \"getCurrentLocation\"\n    )(options);\n  },\n  permission: {\n    name: \"geolocation\",\n    access: \"access\"\n  },\n  error: GetCurrentLocationPermissionError\n});\n\n// src/permissions/openCamera.ts\nimport { createAsyncBridge as createAsyncBridge8 } from \"@apps-in-toss/bridge-core\";\nimport { OpenCameraPermissionError } from \"@apps-in-toss/types\";\nvar openCamera = createPermissionFunction({\n  handler: (options) => {\n    return createAsyncBridge8(\"openCamera\")(options);\n  },\n  permission: {\n    name: \"camera\",\n    access: \"access\"\n  },\n  error: OpenCameraPermissionError\n});\n\n// src/permissions/setClipboardText.ts\nimport { createAsyncBridge as createAsyncBridge9 } from \"@apps-in-toss/bridge-core\";\nimport { SetClipboardTextPermissionError } from \"@apps-in-toss/types\";\nvar setClipboardText = createPermissionFunction({\n  handler: (options) => {\n    return createAsyncBridge9(\"setClipboardText\")(\n      options\n    );\n  },\n  permission: {\n    name: \"clipboard\",\n    access: \"write\"\n  },\n  error: SetClipboardTextPermissionError\n});\n\n// src/permissions/getClipboardText.ts\nimport { createAsyncBridge as createAsyncBridge10 } from \"@apps-in-toss/bridge-core\";\nimport { GetClipboardTextPermissionError } from \"@apps-in-toss/types\";\nvar getClipboardText = createPermissionFunction({\n  handler: () => {\n    return createAsyncBridge10(\"getClipboardText\")();\n  },\n  permission: {\n    name: \"clipboard\",\n    access: \"read\"\n  },\n  error: GetClipboardTextPermissionError\n});\n\n// src/permissions/startUpdateLocation.ts\nimport { createAsyncBridge as createAsyncBridge11, createEventBridge as createEventBridge5 } from \"@apps-in-toss/bridge-core\";\nimport {\n  StartUpdateLocationPermissionError\n} from \"@apps-in-toss/types\";\nvar getPermission2 = createAsyncBridge11(\"getPermission\");\nvar openPermissionDialog2 = createAsyncBridge11(\"openPermissionDialog\");\nvar startUpdateLocation = (params) => {\n  return createEventBridge5(\"updateLocationEvent\")({\n    ...params,\n    onError: (error) => {\n      const locationError = new StartUpdateLocationPermissionError();\n      if (error instanceof Error && error.name === locationError.name) {\n        return params.onError(locationError);\n      }\n      return params.onError(error);\n    }\n  });\n};\nstartUpdateLocation.getPermission = () => getPermission2({ name: \"geolocation\", access: \"access\" });\nstartUpdateLocation.openPermissionDialog = () => openPermissionDialog2({ name: \"geolocation\", access: \"access\" });\n\n// src/index.ts\nexport * from \"@apps-in-toss/types\";\nexport {\n  GoogleAdMob,\n  IAP,\n  Storage,\n  appsInTossEvent,\n  env,\n  fetchAlbumPhotos,\n  fetchContacts,\n  getAppsInTossGlobals,\n  getClipboardText,\n  getCurrentLocation,\n  getSafeAreaInsets,\n  graniteEvent,\n  isMinVersionSupported,\n  openCamera,\n  partner,\n  setClipboardText,\n  startUpdateLocation,\n  tdsEvent\n};\n"],"names":["nativeWindow","_window","window","ReactNativeWebView","postMessage","__GRANITE_NATIVE_EMITTER","on","__CONSTANT_HANDLER_MAP","message","webView","this","Error","JSON","stringify","event","callback","emitter","getConstant","method","constantHandlerMap","concat","createEventId","Math","random","toString","substring","deserializeError","value","__isError","err","name","stack","createAsyncBridge","_len","arguments","length","args","Array","_key","eventId","emitters","unsubscribe","remove","Promise","resolve","reject","push","data","error","type","functionName","createEventBridge","removes","onEvent","onError","options","forEach","createConstantBridge","emit","callbacks","events","i","cb","_this_events","_event","_this","_this_events_event","filter","setIosSwipeGestureEnabled","PermissionError","constructor","_ref","methodName","super","GetCurrentLocationPermissionError","StartUpdateLocationPermissionError","createAsyncBridge2","Object","assign","isSupported","createConstantBridge2","createConstantBridge4","createConstantBridge5","createAsyncBridge3","requestPermission","createAsyncBridge4","getPermission","openPermissionDialog","createPermissionFunction","_ref4","permission","handler","permissionFunction","async","createAsyncBridge5","access","createAsyncBridge6","createAsyncBridge7","createAsyncBridge8","createAsyncBridge9","createAsyncBridge10","getPermission2","createAsyncBridge11","openPermissionDialog2","startUpdateLocation","params","createEventBridge5","_objectSpread","locationError"],"sourceRoot":""}